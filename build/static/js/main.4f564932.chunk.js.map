{"version":3,"sources":["components/NotFoundComponent/index.jsx","pages/Login/index.jsx","navigations/Navigator.js","App.js","serviceWorker.js","index.js","assets/images/background.jpg"],"names":["NotFoundComponent","Wrapper","styled","div","background","FormContainer","Pane","Title","Heading","Input","TextInput","Btn","Button","Login","useState","email","setEmail","password","setPassword","FormElement","size","marginTop","name","placeholder","value","onChange","e","target","appearance","onClick","console","log","Navigator","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"8KAEA,SAASA,IAER,OACC,kD,64BCAF,IAAMC,EAAUC,IAAOC,IAAV,IAMYC,KAInBC,EAAgBH,YAAOI,IAAPJ,CAAH,KAMbK,EAAQL,YAAOM,IAAPN,CAAH,KAILO,EAAQP,YAAOQ,IAAPR,CAAH,KAKLS,EAAMT,YAAOU,IAAPV,CAAH,KAQT,SAASW,IAAS,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGgBF,mBAAS,IAHzB,mBAGTG,EAHS,KAGCC,EAHD,KAKVC,EACL,kBAACd,EAAD,KACC,kBAACE,EAAD,CAAOa,KAAM,IAAKC,UAAU,WAA5B,UACA,kBAACZ,EAAD,CACCa,KAAK,mBACLC,YAAY,mBACZC,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAASU,EAAEC,OAAOH,UAElC,kBAACf,EAAD,CACCa,KAAK,sBACLC,YAAY,sBACZC,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAYQ,EAAEC,OAAOH,UAErC,kBAACb,EAAD,CAAKiB,WAAW,UAAUC,QAAS,WAAQC,QAAQC,IAAR,iBAAsBhB,EAAtB,uBAA0CE,MAArF,YAIF,OACC,kBAAChB,EAAD,KACEkB,GC3DJ,SAASa,IAEP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAI,SAAYC,UAAWtB,IACxC,kBAAC,IAAD,CAAOsB,UAAWnC,M,0GCT1B,IAAMC,EAAUC,IAAOC,IAAV,KAcEiC,MAVf,WACE,OACE,kBAAC,EAAD,KAEE,kBAACJ,EAAD,QCCcK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.4f564932.chunk.js","sourcesContent":["import React from 'react'\n\nfunction NotFoundComponent(){\n\n\treturn(\n\t\t<div>NotFoundComponent</div>\n\t)\n}\n\nexport {NotFoundComponent}","import React,{useState} from 'react'\nimport styled from 'styled-components'\nimport { Pane, TextInput, Button, Heading } from 'evergreen-ui'\nimport background from './../../assets/images/background.jpg';\n\nconst Wrapper = styled.div`\n\tdisplay: flex;\n\twidth: 100%;\n\theight: 100%;\n\tjustify-content: center;\n\talign-items: center;\n\tbackground-image: url(${background});\n\tbackground-repeat: no-repeat;\n\tbackground-size: cover;\n`\nconst FormContainer = styled(Pane)`\n\twidth: 300px;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`\nconst Title = styled(Heading)`\n\tmargin-bottom: 50px;\n\tcolor: white;\n`\nconst Input = styled(TextInput)`\n\twidth: 100%;\n\tmargin-bottom: 10px;\n\theight: 40px;\n`\nconst Btn = styled(Button)`\n\twidth: 100%;\n\tmargin-bottom: 20px;\n\theight: 40px;\n\tdisplay: flex;\n\tjustify-content: center;\n`\n\nfunction Login (){\n\n\tconst [email, setEmail] = useState('');\n\tconst [password, setPassword] = useState('');\n\n\tconst FormElement= (\n\t\t<FormContainer>\n\t\t\t<Title size={800} marginTop=\"default\">MOVIES</Title>\n\t\t\t<Input\n\t\t\t\tname=\"text-input-email\"\n\t\t\t\tplaceholder=\"Enter your Email\"\n\t\t\t\tvalue={email}\n\t\t\t\tonChange={e => setEmail(e.target.value)}\n\t\t\t/>\n\t\t\t<Input\n\t\t\t\tname=\"text-input-password\"\n\t\t\t\tplaceholder=\"Enter your Password\"\n\t\t\t\tvalue={password}\n\t\t\t\tonChange={e => setPassword(e.target.value)}\n\t\t\t/>\n\t\t\t<Btn appearance=\"primary\" onClick={() => { console.log(`Email: ${email}, Password: ${password}`) }}>Sign in</Btn>\n\t\t</FormContainer>\n\t)\n\n\treturn(\n\t\t<Wrapper>\n\t\t\t{FormElement}\n\t\t</Wrapper>\n\t)\n}\n\nexport {Login}","import React from 'react'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport {NotFoundComponent} from './../components/NotFoundComponent'\nimport {Login} from './../pages/Login'\n\nfunction Navigator() {\n\n  return (\n    <Router>\n      <Switch>\n        \n        <Route exact path={`/login`} component={Login} />\n        <Route component={NotFoundComponent} />\n\n      </Switch>\n    </Router>\n  )\n}\n\nexport {Navigator}\n","import React from 'react';\nimport {Navigator} from './navigations/Navigator'\nimport styled from 'styled-components'\nconst Wrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n`\nfunction App() {\n  return (\n    <Wrapper>\n\n      <Navigator/>\n      \n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.5766de26.jpg\";"],"sourceRoot":""}